
import com.sun.xml.internal.messaging.saaj.packaging.mime.util.BASE64EncoderStream;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.*;
import java.util.Random;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author tuannnh
 */
public class Chat extends javax.swing.JFrame implements Runnable {

    //Server Role
    ServerSocket fileSocket = null;
    ServerSocket thisSocket = null;
    BufferedReader br = null;
    DataOutputStream os = null;
    Thread t; //Thread for exploring connection from clients;

    //Client Role
    Socket srvSocket = null;
    Socket fileServerSocket = null;
    String srvIP = "";
    int srvPort = 0;
    String name = "";
    DataOutputStream dos = null;
    OutputThread ot = null;
    BufferedReader bf = null;
    ChatPanel cp;
    Thread clientThread;
    boolean isConnected = false;

    public Chat() {
        initComponents();
        //Server Role
        try {
            do {
                this.txtName.setText(name = JOptionPane.showInputDialog("Please enter Nickname:"));
                if (name.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Your name is required.");
                }
            } while (name.isEmpty());
        } catch (Exception e) {
            System.exit(0);
        }
        this.txtServerIP.requestFocus();
        Random rd = new Random();
        int min = 49152;
        int max = 65535;
        int thisPort;
        int filePort;
        do {
            thisPort = rd.nextInt((max - min) + min);
            filePort = rd.nextInt((max - min) + min);
        } while (filePort == thisPort);

        try {
            thisSocket = new ServerSocket(thisPort);
            fileSocket = new ServerSocket(filePort);
            lblThisIP.setText(Inet4Address.getLocalHost().getHostAddress());
            lblThisPort.setText(String.valueOf(thisPort));

        } catch (Exception e) {
        }

        t = new Thread(this);
        t.start();
        getRootPane().setDefaultButton(btnConnect);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelInfo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblThisIP = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblThisPort = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtServerIP = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtServerPort = new javax.swing.JTextField();
        btnConnect = new javax.swing.JButton();
        tabPanel = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 500));
        setResizable(false);

        panelInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Infomation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Monospaced", 0, 11), new java.awt.Color(0, 51, 153))); // NOI18N
        panelInfo.setMinimumSize(new java.awt.Dimension(500, 110));
        panelInfo.setPreferredSize(new java.awt.Dimension(500, 90));
        panelInfo.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 3, 5));

        jLabel1.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jLabel1.setText("This IP:");
        panelInfo.add(jLabel1);

        lblThisIP.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        lblThisIP.setForeground(new java.awt.Color(255, 0, 0));
        lblThisIP.setPreferredSize(new java.awt.Dimension(150, 20));
        panelInfo.add(lblThisIP);

        jLabel2.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jLabel2.setText("This Port:");
        panelInfo.add(jLabel2);

        lblThisPort.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        lblThisPort.setForeground(new java.awt.Color(255, 0, 0));
        lblThisPort.setPreferredSize(new java.awt.Dimension(200, 20));
        panelInfo.add(lblThisPort);

        jLabel4.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jLabel4.setText("Name:");
        panelInfo.add(jLabel4);

        txtName.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        txtName.setPreferredSize(new java.awt.Dimension(100, 28));
        panelInfo.add(txtName);

        jLabel5.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jLabel5.setText("IP:");
        panelInfo.add(jLabel5);

        txtServerIP.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtServerIP.setPreferredSize(new java.awt.Dimension(115, 28));
        txtServerIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtServerIPActionPerformed(evt);
            }
        });
        panelInfo.add(txtServerIP);

        jLabel6.setFont(new java.awt.Font("Monospaced", 0, 11)); // NOI18N
        jLabel6.setText("Port:");
        panelInfo.add(jLabel6);

        txtServerPort.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txtServerPort.setPreferredSize(new java.awt.Dimension(55, 28));
        txtServerPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtServerPortActionPerformed(evt);
            }
        });
        txtServerPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtServerPortKeyReleased(evt);
            }
        });
        panelInfo.add(txtServerPort);

        btnConnect.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        btnConnect.setText("Connect");
        btnConnect.setPreferredSize(new java.awt.Dimension(100, 25));
        btnConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConnectActionPerformed(evt);
            }
        });
        panelInfo.add(btnConnect);

        getContentPane().add(panelInfo, java.awt.BorderLayout.PAGE_START);

        tabPanel.setMinimumSize(new java.awt.Dimension(500, 400));
        tabPanel.setOpaque(true);
        tabPanel.setPreferredSize(new java.awt.Dimension(500, 400));
        getContentPane().add(tabPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtServerIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtServerIPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtServerIPActionPerformed


    private void btnConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConnectActionPerformed
        //Connect to server
        if (this.txtServerIP.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a valid IP!");
            this.txtServerIP.requestFocus();
            return;
        }
        if (this.txtServerPort.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a valid port!");
            this.txtServerPort.requestFocus();
            return;
        }

        srvIP = this.txtServerIP.getText();
        srvPort = Integer.parseInt(txtServerPort.getText());
        name = this.txtName.getText();

        try {
            srvSocket = new Socket(srvIP, srvPort);
            if (srvSocket != null) {
                isConnected = true;
                bf = new BufferedReader(new InputStreamReader(srvSocket.getInputStream()));
                String s = bf.readLine();
                int pos = s.indexOf(":");//Format: Client:Hoa
                String srvName = s.substring(pos + 1);//Get name
                String hostName = this.txtName.getText();

                s = bf.readLine();
                pos = s.indexOf(":");
                int filePort = Integer.parseInt(s.substring(pos + 1));
                fileServerSocket = new Socket(srvIP, filePort);
                if (fileServerSocket != null) {
                    cp = new ChatPanel(srvSocket, fileServerSocket, hostName, srvName);
                    tabPanel.add(srvName, cp);
                    cp.updateUI();
                }
                dos = new DataOutputStream(srvSocket.getOutputStream());
                // Annouce to server
                dos.writeBytes("Client:" + name);
                dos.writeByte(13);
                dos.writeByte(10);
                dos.flush();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Connect button");
            System.exit(0);
        }


    }//GEN-LAST:event_btnConnectActionPerformed

    private void txtServerPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtServerPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtServerPortActionPerformed

    private void txtServerPortKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtServerPortKeyReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_txtServerPortKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        Chat c = new Chat();
        c.setVisible(true);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConnect;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lblThisIP;
    private javax.swing.JLabel lblThisPort;
    private javax.swing.JPanel panelInfo;
    private javax.swing.JTabbedPane tabPanel;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtServerIP;
    private javax.swing.JTextField txtServerPort;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {

        while (true) {
            try {

                //Wait for a client
                Socket chatClientSocket = thisSocket.accept();
                if (chatClientSocket != null) {
                    isConnected = true;
                    String hostName = this.txtName.getText();
                    //                    Send filePort
                    os = new DataOutputStream(chatClientSocket.getOutputStream());
                    os.writeBytes("Host:" + hostName);
                    os.writeByte(13);

                    os.writeBytes("Port:" + fileSocket.getLocalPort());
                    os.writeByte(13);
                    os.writeByte(10);
                    os.flush();

                    br = new BufferedReader(new InputStreamReader(chatClientSocket.getInputStream()));
                    String s = br.readLine();
                    int pos = s.indexOf(":");//Format: Client:Hoa
                    String clientName = s.substring(pos + 1);//Get name

                    Socket fileClientSocket = fileSocket.accept();
                    //Create a tab for this connection
                    if (fileClientSocket != null) {
                        ChatPanel p = new ChatPanel(chatClientSocket, fileClientSocket, hostName, clientName);
                        tabPanel.add(clientName, p);
                    }
                }
                Thread.sleep(500);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Dsicconected!");
            }
        }
    }
}
